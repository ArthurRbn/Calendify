stages:
  - validate
  - plan
  - apply
  - build_frontend
  - deploy_frontend
  - deploy_backend

validate_terraform:
  image:
    name: hashicorp/terraform:1.5.6
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: validate
  script:
    - cd terraform
    - terraform init
    - terraform validate

plan_terraform:
  image:
    name: hashicorp/terraform:1.5.6
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: plan
  script:
    - cd terraform
    - terraform init
    - terraform plan

apply_terraform:
  image:
    name: hashicorp/terraform:1.5.6
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  stage: apply
  script:
    - cd terraform
    - terraform init
    - terraform apply -auto-approve

build_frontend:
  image: node:21.7.0
  stage: build_frontend
  script:
    - cd calendify-frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - calendify-frontend/build
  only:
    refs:
      - main
    changes:
      - calendify-frontend/**

deploy_frontend:
  image: python:3.9-alpine
  stage: deploy_frontend
  environment:
    name: production
  dependencies:
    - build_frontend
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip install awscli
  script:
    - aws s3api list-buckets
    - aws s3 sync calendify-frontend/build/ s3://$S3_NAME --delete --region $REGION
  only:
    refs:
      - main
    changes:
      - calendify-frontend/**

#deploy_backend:
#  image: docker:latest
#  stage: deploy_backend
#  services:
#    - docker:dind
#  variables:
#    DOCKER_DRIVER: overlay2
#  script:
#    - echo "Logging into AWS ECR..."
#    - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URL
#
#    - echo "Building Docker image..."
#    - docker build -t $ECR_URL:latest ./calendify-backend
#
#    - echo "Tagging image..."
#    - docker tag $ECR_URL:latest $ECR_URL:latest
#
#    - echo "Pushing Docker image to AWS ECR..."
#    - docker push $ECR_URL:latest
#
#    - echo "Updating ECS Service..."
#    - aws ecs update-service --cluster calendify-backend-cluster --service calendify-backend-service --force-new-deployment --region $REGION
#
#  only:
#    refs:
#      - main

deploy_backend:
  image: python:3.9-alpine
  stage: deploy_backend
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache python3 py3-pip py3-docker
    - pip install awscli
    - aws --version
    - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URL
  script:
    # Build the Docker image
    - echo "Building Docker image..."
    - docker build -t $ECR_URL/calendify-backend:latest ./calendify-backend

    # Tag the image
    - docker tag calendify-backend:latest $ECR_URL/calendify-backend:latest

    # Push the Docker image to ECR
    - docker push $ECR_URL/calendify-backend:latest

    # Update the ECS Service
    - aws ecs update-service --cluster calendify-backend-cluster --service calendify-backend-service --force-new-deployment --region $AWS_REGION
  only:
    refs:
      - main
#    changes:
#      - calendify-backend/**

#    changes:
#      - calendify-backend/**
